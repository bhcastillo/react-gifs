{"version":3,"sources":["components/addCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/Gifgrid.js","helpers/hooks/useFetchGifs.js","gitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_large","GifGridItem","className","src","alt","Gifgrid","loading","state","setState","useEffect","then","imgs","setTimeout","catch","useFetchGifs","GifExportApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,QAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACE,uBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCC,QAAQC,IAAI,YACZR,EAAc,MAIhB,UACE,6BAAKD,IACL,uBACEU,KAAK,OACLC,MAAOX,EACPY,SAjBoB,SAACT,GACzBF,EAAcE,EAAEU,OAAOF,c,sCCLdG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,8DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGFA,EAAKC,OAHH,cAGfC,EAHe,OAIfC,EAAOD,EAAKA,KAAKE,KAAI,SAAAC,GACzB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,gBAAgBZ,QARf,kBAWdM,GAXc,2CAAH,sDCGPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,sBAAKc,UAAU,kBAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACxB,ECD0B,SAACA,GAC3B,MAA0BhB,mBAAS,CACjCuB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAZAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAAAC,GAAI,OACRC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAEV,QACJO,OAAM,SAAAvC,GAAC,OAAIK,QAAQC,IAAI,CAAEN,WAC3B,CAACY,IAEGqB,EDhB2BO,CAAa5B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QACtB,OACE,qCACE,mCAAMpB,EAAN,OAECoB,GAAW,WACZ,qBAAKJ,UAAU,YAAf,SACIH,EAAOtB,OAAS,GAChBsB,EAAOJ,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEXVkB,EAAe,WAC1B,MAAoC7C,mBAAS,CAAC,gBAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAEA,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC3B+C,EAAWrB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAEEA,SAAUA,GADLA,UCTf+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.231ae72c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('hoal')\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats])\r\n      console.log('se lanzo')\r\n      setInputValue('')\r\n    }\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h1>{inputValue}</h1>\r\n      <input\r\n        type='text'\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=NrZDVtLvkKu3Y8qh5ANm0CyuxsmCePcU`\r\n  const resp = await fetch(url)\r\n  const data = await resp.json()\r\n  const gifs = data.data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_large.url\r\n    }\r\n  })\r\n  return gifs\r\n}\r\n","\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useFetchGifs } from '../helpers/hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\nexport const Gifgrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category)\r\n  return (\r\n    <>\r\n      <h3> {category} </h3>\r\n      {/* <pre>{ images }</pre> */}\r\n      {loading && 'Cargando'}\r\n      <div className=\"card-grid\">\r\n        { images.length > 0 &&\r\n          images.map((img) => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img} />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nGifgrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n}\r\n","import { useState } from 'react'\r\nimport { useEffect } from 'react/cjs/react.development'\r\nimport { getGifs } from '../getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then(imgs =>\r\n        setTimeout(() => {\r\n          setState({\r\n            data: imgs,\r\n            loading: false\r\n          })\r\n        }, 3000))\r\n      .catch(e => console.log({ e }))\r\n  }, [category])\r\n\r\n  return state\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/addCategory'\r\nimport { Gifgrid } from './components/Gifgrid'\r\n\r\nexport const GifExportApp = () => {\r\n  const [categories, setCategories] = useState(['Dragon Ball'])\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExportApp</h2>\r\n      <hr />\r\n      <AddCategory setCategories={setCategories} />\r\n      {categories.map((category) => (\r\n        <Gifgrid\r\n          key={category}\r\n          category={category}\r\n        />\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { GifExportApp } from './gitExpertApp'\n\nReactDOM.render(\n  <GifExportApp />,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}